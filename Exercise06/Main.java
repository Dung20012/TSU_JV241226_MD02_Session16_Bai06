package BTVN.Exercise06;

import java.util.List;
import java.util.Scanner;

public class Main {
    private static final Scanner sc = new Scanner(System.in);
    private static final TaskManagement manager = new TaskManagement();

    public static void main(String[] args) {
        while (true) {
            System.out.println("MENU TO-DO LIST");
            System.out.println("1. Th√™m c√¥ng vi·ªác");
            System.out.println("2. Hi·ªÉn th·ªã c√¥ng vi·ªác");
            System.out.println("3. C·∫≠p nh·∫≠t tr·∫°ng th√°i");
            System.out.println("4. X√≥a c√¥ng vi·ªác");
            System.out.println("5. T√¨m ki·∫øm c√¥ng vi·ªác");
            System.out.println("6. Th·ªëng k√™ c√¥ng vi·ªác");
            System.out.println("7. Tho√°t");
            System.out.print("L·ª±a ch·ªçn c·ªßa b·∫°n: ");
            int choice = sc.nextInt();

            switch (choice) {
                case 1: addTask();
                    break;
                case 2: listTasks();
                    break;
                case 3: updateStatus();
                    break;
                case 4: deleteTask();
                    break;
                case 5: searchTask();
                    break;
                case 6: manager.taskStatistics();
                    break;
                case 7:
                    System.out.println("Tho√°t ch∆∞∆°ng tr√¨nh.");
                    return;
                default:
                    System.out.println("L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá.");
            }
        }
    }

    private static void addTask() {
        String name = inputNotEmpty("T√™n c√¥ng vi·ªác: ");
        String status = inputStatus("Tr·∫°ng th√°i (ch∆∞a ho√†n th√†nh / ƒë√£ ho√†n th√†nh): ");
        manager.addTask(name, status);
    }

    private static void listTasks() {
        List<Task> tasks = manager.listTasks();
        if (tasks.isEmpty()) {
            System.out.println("üì≠ Kh√¥ng c√≥ c√¥ng vi·ªác n√†o.");
        } else {
            tasks.forEach(t -> System.out.printf("ID: %d | T√™n: %s | Tr·∫°ng th√°i: %s%n",
                    t.getId(), t.getTaskName(), t.getStatus()));
        }
    }

    private static void updateStatus() {
        int id = inputInt("Nh·∫≠p ID c·∫ßn c·∫≠p nh·∫≠t: ");
        String status = inputStatus("Tr·∫°ng th√°i m·ªõi (ch∆∞a ho√†n th√†nh / ƒë√£ ho√†n th√†nh): ");
        manager.updateTaskStatus(id, status);
    }

    private static void deleteTask() {
        int id = inputInt("Nh·∫≠p ID c·∫ßn x√≥a: ");
        manager.deleteTask(id);
    }

    private static void searchTask() {
        String name = inputNotEmpty("Nh·∫≠p t√™n c√¥ng vi·ªác c·∫ßn t√¨m: ");
        List<Task> tasks = manager.searchTaskByName(name);
        if (tasks.isEmpty()) {
            System.out.println("Kh√¥ng t√¨m th·∫•y.");
        } else {
            tasks.forEach(t -> System.out.printf("ID: %d | T√™n: %s | Tr·∫°ng th√°i: %s%n",
                    t.getId(), t.getTaskName(), t.getStatus()));
        }
    }

    //  H√†m nh·∫≠p c√≥ ki·ªÉm tra
    private static String inputNotEmpty(String msg) {
        while (true) {
            System.out.print(msg);
            String input = sc.nextLine().trim();
            if (!input.isEmpty()) return input;
            System.out.println("Kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng.");
        }
    }

    private static int inputInt(String msg) {
        while (true) {
            System.out.print(msg);
            try {
                return Integer.parseInt(sc.nextLine().trim());
            } catch (NumberFormatException e) {
                System.out.println("Vui l√≤ng nh·∫≠p s·ªë nguy√™n.");
            }
        }
    }

    private static String inputStatus(String msg) {
        while (true) {
            System.out.print(msg);
            String input = sc.nextLine().trim().toLowerCase();
            if (input.equals("ch∆∞a ho√†n th√†nh") || input.equals("ƒë√£ ho√†n th√†nh")) {
                return input;
            }
            System.out.println("Tr·∫°ng th√°i ch·ªâ nh·∫≠n: 'ch∆∞a ho√†n th√†nh' ho·∫∑c 'ƒë√£ ho√†n th√†nh'.");
        }
    }
}
